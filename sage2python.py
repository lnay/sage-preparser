#!/usr/bin/env python

import sys
from tree_sitter import Language, Parser

PY_LANGUAGE = Language('build/sage.so', 'python')

def ast_tree(code):
    parser = Parser()
    parser.set_language(PY_LANGUAGE)
    return parser.parse(code)

def process(code, node):
    start = node.start_byte
    end = node.end_byte
    cursor = start

    if node.type == "sage_integer":
        print("Integer(", end="")
        print(code[start: end].decode("utf-8"), end="")
        print(")", end="")
        return
    if node.type == "sage_real_number":
        print("RealNumber('", end="")
        print(code[start: end].decode("utf-8"), end="")
        print("')", end="")
        return
    if node.type == "python_integer":
        # print it without the tailing r
        print(code[start: end-1].decode("utf-8"), end="")
        return
    if node.type == "python_float":
        # print it without the tailing r
        print(code[start: end-1].decode("utf-8"), end="")
        return
    if node.type == "generator_index":
       object_child = node.children[0] 
       index_child = node.children[2] 
       process(code, node=object_child)
       print(".gen(", end="")
       process(code, node=index_child)
       print(")", end="")
       return

    if node.type == "module":
        print("# This file was generated by python script using tree-sitter APIs")
        print("from sage.all_cmdline import *")
        print("")

    for child_node in node.children:
        child_start = child_node.start_byte
        child_end = child_node.end_byte
        print(code[cursor: child_start].decode("utf-8"), end="")
        process(code, node=child_node)
        cursor = child_end

    print(code[cursor: end].decode("utf-8"), end="")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: ./main.py <filename>")
        exit(1)

    file_name = sys.argv[1]
    input_code = open(file_name, "rb").read()

    process(input_code, ast_tree(input_code).root_node)
    print("")

